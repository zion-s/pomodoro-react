{"version":3,"sources":["Duration.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["Duration","props","increaseTime","decreaseTime","increaseBreakTime","decreaseBreakTime","id","sessionLabel","className","type","onClick","sessionLength","calculateTime","breakLabel","breakLength","Timer","handleStart","pauseBtn","condition","handleReset","App","stopTimer","timer","clearInterval","pomodoroStarted","setInterval","setState","time","state","breakTime","handlePause","isPaused","breakStarted","breakTimer","handleResume","Math","floor","console","log","audio","Audio","this","play","startBreak","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90fce51b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Duration.css';\r\n\r\nconst Duration = props => {\r\n\r\n  const { increaseTime, decreaseTime, increaseBreakTime, decreaseBreakTime } = props;\r\n\r\n   return (\r\n     <div id=\"duration\">\r\n       \r\n       <h4 id=\"session-label\">\r\n        {props.sessionLabel}\r\n       </h4>\r\n\r\n       <div className=\"row\"> {/* new row */}\r\n         <div className=\"col d-none d-md-block\"></div>\r\n         <div className=\"col\">\r\n           <button\r\n             type=\"button\"\r\n             className=\"btn btn-outline-secondary plus_minus\"\r\n             id=\"session-increment\"\r\n             onClick={increaseTime}\r\n           >\r\n             +\r\n           </button>\r\n         </div>\r\n\r\n         <div className=\"col\">\r\n           <h3 id=\"session-length\">\r\n             {props.sessionLength} {props.calculateTime}\r\n           </h3>\r\n         </div>\r\n\r\n         <div className=\"col\">\r\n           <button\r\n             type=\"button\"\r\n             className=\"btn btn-outline-secondary plus_minus\"\r\n             id=\"session-decrement\"\r\n             onClick={decreaseTime}\r\n           >\r\n             -\r\n           </button>\r\n         </div>\r\n         <div className=\"col d-none d-md-block\"></div>\r\n       </div> {/* end of row */}\r\n     \r\n\r\n       <h4 id=\"break-label\">\r\n         {props.breakLabel}\r\n       </h4>\r\n\r\n       <div className=\"row\"> {/* new row */}\r\n         <div className=\"col d-none d-md-block\"></div>\r\n         <div className=\"col\">\r\n           <button\r\n             type=\"button\"\r\n             className=\"btn btn-outline-secondary plus_minus\"\r\n             id=\"break-increment\"\r\n             onClick={increaseBreakTime}\r\n           >\r\n             +\r\n           </button>\r\n         </div>\r\n         <div className=\"col\">\r\n           <h3 id=\"break-length\">\r\n             {props.breakLength} {props.calculateTime}\r\n           </h3>\r\n         </div>\r\n         <div className=\"col\">\r\n           <button\r\n             type=\"button\"\r\n             className=\"btn btn-outline-secondary plus_minus\"\r\n             id=\"break-decrement\"\r\n             onClick={decreaseBreakTime}\r\n           >\r\n             -\r\n           </button>\r\n         </div>\r\n         <div className=\"col d-none d-md-block\"></div>\r\n       </div> {/* end of row */}\r\n      \r\n     </div>\r\n   ); \r\n  }\r\n  export default Duration;","import React from 'react';\r\nimport './Timer.css';\r\n\r\nconst Timer = props => {\r\n    return(\r\n         <div id=\"timer\" className=\"row\">\r\n          <div className=\"col buttons-column\">\r\n\r\n          <button \r\n              id=\"start_stop\"\r\n              onClick={props.handleStart}\r\n              className=\"btn btn-secondary\">\r\n              Start\r\n            </button>\r\n\r\n            <button \r\n              onClick={props.pauseBtn}\r\n              className=\"btn btn-secondary\">\r\n              {props.condition}\r\n            </button>\r\n\r\n            <button \r\n              id=\"reset\"\r\n              onClick={props.handleReset}\r\n              className=\"btn btn-secondary\">\r\n              Reset\r\n            </button>\r\n\r\n          </div> \r\n        </div> \r\n    ) \r\n}\r\nexport default Timer;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Duration from './Duration';\nimport Timer from './Timer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      time: 1500,\n      breakTime: 300\n    }\n\n    this.breakTime =  300;\n    this.pomodoroStarted = false;\n    this.breakStarted = false;\n    this.isPaused = false;\n    this.audio = new Audio(\"https://dl.dropbox.com/s/nacdk0xey4io5d8/wink-sound-effect.mp3\")\n  }\n  \n  stopTimer = timer => {\n    clearInterval(timer);\n    timer = null;\n  }\n\n  handleStart = () => {\n    if (!this.pomodoroStarted) {\n      this.timer = setInterval(() => {\n        this.setState({ time: this.state.time - 1});\n      }, 1000);\n      this.pomodoroStarted = !this.pomodoroStarted;\n    }\n\n    if (!this.time) {\n      this.time = this.state.time;\n      this.breakTime = this.state.breakTime;\n    }\n  }\n\n  handlePause = () => {\n    if (this.pomodoroStarted) {\n      this.isPaused = true;\n      this.setState(this.state);\n      if (!this.breakStarted) {\n        this.stopTimer(this.timer);\n      }\n\n      if (this.breakStarted) {\n        this.stopTimer(this.breakTimer)\n      }\n    }\n  }\n\n  handleResume = () => {\n    if (this.pomodoroStarted) {\n      this.setState(this.state)\n      this.isPaused = false;\n\n      if (!this.breakStarted) {\n        this.timer = setInterval(() => {\n          this.setState({ time: this.state.time - 1 })\n        }, 1000);\n      }\n\n      if (this.breakStarted) {\n        this.breakTimer = setInterval(() => {\n          this.setState({ breakTime: this.state.breakTime - 1 })\n        }, 1000);\n      }\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      time: 1500,\n      breakTime: 300\n    })\n    this.stopTimer(this.timer);\n    this.pomodoroStarted = false;\n    this.stopTimer(this.breakTimer);\n    this.breakStarted = false;\n    this.isPaused = false;\n  }\n\n  calculateTime = time => {\n    return `${Math.floor(time / 60)} : ${time % 60 > 9 ? \"\" + time % 60 : \"0\" + time % 60}`;\n  }\n\n  increaseTime = () => {\n    if (!this.pomodoroStarted && this.state.time !== 3600) {\n      this.setState({ time: this.state.time + 60})\n    }\n    console.log('increase session time')\n  }\n\n  increaseBreakTime = () => {\n    if (!this.pomodoroStarted && this.breakTime !== 1800) {\n      this.breakTime = this.breakTime + 60;\n      this.setState({ breakTime: this.state.breakTime + 60})\n    }\n    console.log('increase break time')\n  }\n\n  decreaseTime = () => {\n    if (this.state.time > 60 && !this.pomodoroStarted) {\n      this.setState({ time: this.state.time - 60 })\n    }\n    console.log('decrease session time')\n  }\n\n  decreaseBreakTime = () => {\n    if (this.breakTime > 60) {\n      this.breakTime = this.breakTime - 60;\n    }\n\n    if (this.state.breakTime > 60 && !this.pomodoroStarted) {\n      this.setState({ breakTime: this.state.breakTime - 60 })\n    }\n    console.log('decrease break time')\n  }\n\n  componentDidUpdate() {\n    if (this.state.time < 1) {\n      this.audio.play();\n      this.stopTimer(this.timer);\n      \n      this.setState({ time: this.time });\n      if (!this.breakStarted) {\n        this.startBreak();\n        this.breakStarted = true;\n      }\n    }\n\n    if (this.state.breakTime < 1) {\n      this.audio.play();\n      this.stopTimer(this.breakTimer);\n\n      this.setState({ breakTime: this.breakTime });\n      this.pomodoroStarted = false;\n      this.breakStarted = false;\n      this.handleStart();\n    }\n  }\n\n  startBreak() {\n    this.breakTimer = setInterval(() => {\n      this.setState({ breakTime: this.state.breakTime - 1 })\n    }, 1000);\n  }\n\n\n  render() {\n    return (\n      <div className=\"App container text-center\">\n        <h1>Pomodoro Clock</h1>\n\n        <Duration\n          sessionLabel=\"Session Length\"\n          increaseTime={this.increaseTime}\n          decreaseTime={this.decreaseTime}\n          sessionLength={\n            this.breakStarted\n              ? this.calculateTime(this.state.breakTime)\n              : this.calculateTime(this.state.time)\n          }\n          breakLabel=\"Break Length\"\n          increaseBreakTime={this.increaseBreakTime}\n          decreaseBreakTime={this.decreaseBreakTime}\n          breakLength={\n            this.breakStarted\n              ? this.calculateTime(this.state.time)\n              : this.calculateTime(this.state.breakTime)\n          }\n        />\n\n        <Timer\n          handleStart={this.handleStart}\n          pauseBtn={this.isPaused ? this.handleResume : this.handlePause}\n          condition={this.isPaused ? \"Resume\" : \"Pause\"}\n          handleReset={this.handleReset}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}